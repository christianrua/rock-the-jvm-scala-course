package lectures.part2oop

object Generics extends App {

  //class MyList[A]{
  class MyList[+A]{
    //the A is a generic type, so you can changed the type when you are instantiated this class
    def add[B >: A](element: B): MyList[B] = ???
    /*B is a super type of A, so in this way the list generated by this method y more generic.
    example: if i have a list of cats, you can add a Dog, and terminating with a list of Animals
    A = Cat
    B = Dog = Animal
     */
  }

  class MyMap[Key,Value] //key and value are generic as well
  val listOfIntegers = new MyList[Int]
  val listOfStrings = new MyList[String]

  //generic methods
  object MyList{
    def empty[A]: MyList[A] = new MyList[A]//???
  }

  val emptyListOfIntegers = MyList.empty[Int]

  //variance problem
  class Animal
  class Cat extends Animal
  class Dog extends Animal

  /*
  if cat extends a animal, does a list of cat extends a list of animal?
  there are 3 possibles answers:
    1. yes, List[Cat] extends List[Animal] = this is call COVARIANCE

   */
  class CovariantList[+A] //the + sign is for declared it Covariant
  val animal: Animal = new Cat
  val animalList: CovariantList[Animal] = new CovariantList[Cat]
  //animalList.add(new Dog)??? hard question, because the list is of Cats not Dogs.
  ////we return a list of animals.

  // 2 answer: NO, this is call INVARIANCE
  class InvariantList[A] //whit out the sign is call Invariant
  val invariantAnimalList: InvariantList[Animal] = new InvariantList[Animal]

  //3 answer. Hell, no! Contravariance
  class ContravariantList[-A]
  val contravariantLIst: ContravariantList[Cat] = new ContravariantList[Animal]

  class Trainer[-A]
  val trainer: Trainer[Cat] = new Trainer[Animal]

  /*bounded types: allow your to use you generic classes only for certain types that are
    ither a subclass with different type or a super class with different type
  */
  class Cage[A <: Animal](animal:A) //this class accepts types that are subtypes of Animal. upper bounded type
  val cage = new Cage(new Dog)

  class Car
  //generic type needs proper bounded
  //val newCage = new Cage(new Car) // this line generates a error, because Car is not inside Animal type

  class NewCage[A >: Animal]  //lower bounded type, witch means that only accepts super types of Animal

  //expand MyList to be generic
}
